[0: Board driver for Sonochan mkII v0.6.1]
; device id (did): 0
; serial number: 15

[0: Initialize board hardware]
; initialize i/o and prepare codec
; set call_function to non zero if you want call this function
call_function = 0

[0: Reset connector I/O's]
; set all signals to hi-z. codec on board will work.
; set call_function to non zero if you want call this function
call_function = 0

[0: MCLK direction]
; 0 - input ; 1 - output ; 2 - hi-z
; type: uint32 < 0 : 2 > | current value: 2
value = 2

[0: BCLK role and direction]
; 0 - slave, bclk is input ; 1 - master, bclk output ; 2 - hi-z
; type: uint32 < 0 : 2 > | current value: 2
value = 2

[0: FSYNC role and direction]
; 0-slave, fsync (word clock) is input; 1-master, fsync is output; 2-hi-z
; type: uint32 < 0 : 2 > | current value: 2
value = 2

[0: MUTE direction]
; 0 - input ; 1 - output ; 2 - hi-z
; type: uint32 < 0 : 2 > | current value: 2
value = 2

[0: Set mute flag]
; 0 - mute off ; 1 - mute on
; type: uint8 < 0 : 1 > | current value: 0
value = 0

[0: Set RESET_I2S direction]
; 0 - input ; 1 - output ; 2 - hi-z
; type: uint32 < 0 : 2 > | current value: 2
value = 2

[0: Set reset I2S flag]
; 0 - off ; 1 - on
; type: uint8 < 0 : 1 > | current value: 0
value = 0

[0: Set TX_DATA direction]
; 1 - output ; 2 - hiz
; type: uint32 < 1 : 2 > | current value: 2
value = 2

[0: Set RX_DATA direction]
; 0 - input ; 1 - not allowed ; 2 - hiz
; type: uint32 < 0 : 2 > | current value: 2
value = 2

[0: Set word size]
; data size in bits. usually 16, 20, 24 and 32
; type: uint8 < 1 : 32 > | current value: 24
value = 24

[0: MCLK frequency]
; options: 16, 32, 64, 128, 256, 512 fsync
; type: uint16 < 1 : 1024 > | current value: 256
value = 256

[0: Offset of MCLK in PPM]
; allow slightly change mclk frequency. auto tune pll have to be disabled!
; type: int32 < -1000000 : 1000000 > | current value: 0
value = 0

[0: BCLK frequency]
; options: 16, 32, 64, 128, 256, 512 fsync
; type: uint16 < 1 : 512 > | current value: 64
value = 64

[0: Digital audio interface mode]
; 0-i2s ; 1-dsp ; 2-left justified ; 3-right justified
; type: uint32 < 0 : 3 > | current value: 0
value = 0

[0: Word offset (delay between FSYNC and TX/RX_DATA)]
; 0 ~ 255. codec safe limit is 16. value 256 means default value
; type: uint16 < 0 : 256 > | current value: 256
value = 256

[0: RX FSYNC edge]
; rx fsync sync edge ; 0 - falling ; 1 - rising ; 2 - default
; type: uint32 < 0 : 2 > | current value: 2
value = 2

[0: TX FSYNC edge]
; tx fsync sync edge ; 0 - falling ; 1 - rising ; 2 - default
; type: uint32 < 0 : 2 > | current value: 2
value = 2

[0: RX BCLK sampling edge]
; rx bclk sync edge ; 0 - falling ; 1 - rising ; 2 - default
; type: uint32 < 0 : 2 > | current value: 2
value = 2

[0: TX BCLK transmitting edge]
; tx bclk sync edge ; 0 - falling ; 1 - rising ; 2 - default
; type: uint32 < 0 : 2 > | current value: 2
value = 2

[0: Auto tune PLL when audio feedback not work]
; enable (1) or disable (0)
; type: uint8 < 0 : 1 > | current value: 1
value = 1

[0: Add number behind device name]
; after that, device must be restarted. 0 means no number (erase number).
; type: uint8 < 0 : 15 > | current value: 1
value = 1

[0: Restore saved settings]
; load and apply saved settings
; set call_function to non zero if you want call this function
call_function = 0

[0: Load default factory settings (Erase actual settings!)]
; this function also erase saved settings! so think twice!
; set call_function to non zero if you want call this function
call_function = 0

[0: Save all settings]
; just save variables to flash memory
; set call_function to non zero if you want call this function
call_function = 0

